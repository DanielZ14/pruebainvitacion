---
interface Image {
  src: string;
  alt: string;
}

const images: Image[] = [];
for (let i = 1; i <= 14; i++) {
  images.push({
    src: `/galeria/${i}.jpeg`,
    alt: `Imagen ${i}`,
  });
}
---

<div class="carousel-container">
  <div class="carousel-track">
    {images.map((image, index) => (
      <div class="carousel-slide" id={`slide-${index}`}>
        <img
          src={image.src}
          alt={image.alt}
          loading="lazy"
          class="carousel-image"
        />
      </div>
    ))}
  </div>
  <div class="carousel-dots">
    {images.map((_, index) => (
      <button class="carousel-dot" data-slide-index={index} aria-label={`Ir a imagen ${index + 1}`}></button>
    ))}
  </div>
</div>

<style>
.carousel-container {
  position: relative;
  width: 100%;
  max-width: 800px; /* Adjust as needed */
  margin: 2rem auto;
  overflow: hidden; /* Hide overflowing slides */
  border-radius: 10px;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
}

.carousel-track {
  display: flex;
  overflow-x: scroll;
  scroll-snap-type: x mandatory; /* Enable snapping */
  scroll-behavior: smooth; /* Smooth scrolling */
  -webkit-overflow-scrolling: touch; /* Smooth scrolling on iOS */
  scrollbar-width: none; /* Hide scrollbar (Firefox) */
  -ms-overflow-style: none;  /* Hide scrollbar (IE/Edge) */
}
.carousel-track::-webkit-scrollbar {
  display: none; /* Hide scrollbar (Chrome, Safari, Opera) */
}

.carousel-slide {
  flex: 0 0 100%; /* Each slide takes full width */
  scroll-snap-align: center; /* Snap slides to the center */
  position: relative;
  aspect-ratio: 16 / 10; /* Maintain aspect ratio */
}

.carousel-image {
  display: block;
  width: 100%;
  height: 100%;
  object-fit: cover;
  object-position: center;
}

.carousel-button {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  background-color: rgba(255, 255, 255, 0.7);
  border: none;
  border-radius: 50%;
  width: 40px;
  height: 40px;
  font-size: 20px;
  font-weight: bold;
  color: #333;
  cursor: pointer;
  z-index: 10;
  transition: background-color 0.2s ease;
}
.carousel-button:hover {
  background-color: rgba(255, 255, 255, 0.9);
}
.carousel-button.prev {
  left: 10px;
}
.carousel-button.next {
  right: 10px;
}

.carousel-dots {
  position: absolute;
  bottom: 15px;
  left: 50%;
  transform: translateX(-50%);
  display: flex;
  gap: 8px;
  z-index: 10;
}

.carousel-dot {
  width: 10px;
  height: 10px;
  border-radius: 50%;
  background-color: rgba(255, 255, 255, 0.5);
  border: none;
  padding: 0;
  cursor: pointer;
  transition: background-color 0.2s ease;
}
.carousel-dot.active {
  background-color: rgba(255, 255, 255, 0.9);
}
</style>

<script is:inline>
// Wrap setup in setTimeout to ensure DOM is fully ready
setTimeout(() => {
  const container = document.querySelector('.carousel-container');
  if (!container) return; // Exit if container not found

  const track = container.querySelector('.carousel-track');
  const slides = Array.from(track?.children || []);
  const nextButton = container.querySelector('.carousel-button.next');
  const prevButton = container.querySelector('.carousel-button.prev');
  const dotsNav = container.querySelector('.carousel-dots');
  const dots = Array.from(dotsNav.children);

  // Calculate slideWidth dynamically inside moveToSlide
  let currentSlideIndex = 0;
  let autoplayInterval = null;
  const AUTOPLAY_DELAY = 5000; // 5 seconds

  // Function to move to a specific slide
  const moveToSlide = (targetIndex) => {
    const slideWidth = slides[0].getBoundingClientRect().width; // Calculate width here
    if (slideWidth === 0) return; // Avoid division by zero or incorrect scroll if width is 0

    // Handle looping
    if (targetIndex < 0) {
      targetIndex = slides.length - 1;
    } else if (targetIndex >= slides.length) {
      targetIndex = 0;
    }

    const newScrollLeft = targetIndex * slideWidth;

    track.scrollTo({
      left: newScrollLeft,
      behavior: 'smooth'
    });
    currentSlideIndex = targetIndex;
    updateDots();
  };

  // Update dots indicator
  const updateDots = () => {
    dots.forEach(dot => dot.classList.remove('active'));
    if (dots[currentSlideIndex]) {
      dots[currentSlideIndex].classList.add('active');
    }
  };

  // Start autoplay
  const startAutoplay = () => {
    stopAutoplay(); // Clear existing interval first
    autoplayInterval = setInterval(() => {
      moveToSlide(currentSlideIndex + 1);
    }, AUTOPLAY_DELAY);
  };

  // Stop autoplay
  const stopAutoplay = () => {
    clearInterval(autoplayInterval);
  };

  // Button event listeners
  nextButton.addEventListener('click', () => {
    moveToSlide(currentSlideIndex + 1);
    stopAutoplay(); // Stop autoplay on manual interaction
    startAutoplay(); // Restart autoplay timer
  });

  prevButton.addEventListener('click', () => {
    moveToSlide(currentSlideIndex - 1);
    stopAutoplay();
    startAutoplay();
  });

  // Dots event listeners
  dotsNav.addEventListener('click', e => {
    const targetDot = e.target.closest('button');
    if (!targetDot) return;

    const targetIndex = dots.findIndex(dot => dot === targetDot);
    moveToSlide(targetIndex);
    stopAutoplay();
    startAutoplay();
  });

  // Update dots on scroll (for manual scroll snapping)
  // Debounce function to limit scroll event handler frequency
  function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
      const later = () => {
        clearTimeout(timeout);
        func(...args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  }

  const handleScroll = debounce(() => {
      const currentSlideWidth = slides[0].getBoundingClientRect().width; // Use current width for calculation
      if (currentSlideWidth === 0) return;
      const scrollLeft = track.scrollLeft;
      // Find the index of the slide closest to the center
      currentSlideIndex = Math.round(scrollLeft / currentSlideWidth);
      updateDots();
  }, 150); // Adjust debounce time as needed

  track.addEventListener('scroll', handleScroll);


  // Initialize
  updateDots();
  startAutoplay();

  // Optional: Pause autoplay on hover
  container.addEventListener('mouseenter', stopAutoplay);
  container.addEventListener('mouseleave', startAutoplay);

  // Recalculate scroll position on resize
   window.addEventListener('resize', debounce(() => {
      const newSlideWidth = slides[0].getBoundingClientRect().width;
      if (newSlideWidth > 0) {
        // Recalculate scroll position based on the current slide index and new width
        track.scrollTo({ left: currentSlideIndex * newSlideWidth, behavior: 'auto' });
      }
  }, 250));


</script>