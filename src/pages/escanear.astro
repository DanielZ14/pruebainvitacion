---
// pages/escanear.astro
import { db } from "../lib/firebase";
import { doc, getDoc, collection, query, where, getDocs } from "firebase/firestore";

let invitadoData: any = null;
let errorMessage: string | null = null;
let scannedId: string | null = null; // Store scanned ID separately

if (Astro.request.method === "POST") {
    const formData = await Astro.request.formData();
    const searchType = formData.get("searchType"); // 'qr' or 'id'
    const qrResult = formData.get("qr-result");
    const idInput = formData.get("id-input"); // Get the ID input

    console.log("searchType", searchType);
    console.log("searchInput", idInput);


    try {
        if (searchType === "qr" && qrResult) {
            // QR Code Search
            scannedId = qrResult.toString();
            const docRef = doc(db, "invitados", qrResult.toString());
            const docSnap = await getDoc(docRef);
            if (docSnap.exists()) {
                invitadoData = { id: docSnap.id, ...docSnap.data() };
            } else {
                errorMessage = "Invitado no encontrado (ID inválido).";
            }
        } else if (searchType === "id" && idInput) {
            // ID Search (direct document fetch)
            const docRef = doc(db, "invitados", idInput.toString());
            const docSnap = await getDoc(docRef);
            if (docSnap.exists()) {
                invitadoData = { id: docSnap.id, ...docSnap.data() };
            } else {
                errorMessage = "Invitado no encontrado (ID inválido).";
            }
        } else {
            errorMessage = "Por favor, escanea un código QR o ingresa un ID.";
        }

        // Fetch confirmation data (if any, and for single results)
        if (invitadoData && !Array.isArray(invitadoData)) {
            const confirmacionRef = doc(db, "confirmaciones", invitadoData.id);
            const confirmacionSnap = await getDoc(confirmacionRef);
            if (confirmacionSnap.exists()) {
                invitadoData = { ...invitadoData, confirmacion: confirmacionSnap.data() };
            }
        }

    } catch (error) {
        console.error("Error fetching data:", error);
        errorMessage = "Error al obtener datos.  Verifica tu conexión.";
    }
}

---

<html lang="es">
<head>
  <title>Escanear Invitado</title>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  <script src="https://unpkg.com/html5-qrcode" type="text/javascript"></script>
  <style>
    #reader__scan_region video {
      width: 100% !important;
      height: auto !important;
      object-fit: cover;
    }
    #reader__no-video{
        display: none !important;
    }
    /* Hide the file input */
    #reader input[type="file"] {
        display: none;
    }

    #reader__scan_region {
        border: 2px solid #ccc;
        border-radius: 8px;
        overflow: hidden;
    }
    #reader__scan_result {
        margin-top: 10px;
    }
     .hidden {
        display: none;
    }

  </style>
</head>
<body class="bg-gray-100 font-sans p-4">
  <h1 class="text-2xl font-bold mb-4 text-center">Escanear/Buscar Invitado</h1>

  <div class="max-w-md mx-auto bg-white rounded-lg shadow p-6">

    <div id="reader" width="600px"></div>
     <form method="post" id="qr-form">
        <input type="hidden" name="searchType" value="qr">
        <input type="hidden" name="qr-result" id="qr-result" value="">
    </form>


    <div class="my-4 border-t border-gray-300"></div>

    {/* Manual ID Input Form */}
    <form method="post" class="mb-4" id="id-form">
      <input type="hidden" name="searchType" value="id">
      <label for="id-input" class="block text-sm font-medium text-gray-700">
        Ingresa el ID del Invitado:
      </label>
      <div class="mt-1 flex rounded-md shadow-sm">
        <input type="text" name="id-input" id="id-input"
               class="flex-1 block w-full rounded-md border-gray-300 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
               placeholder="ID del Invitado">
        <button type="submit"
                class="ml-2 inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
          Buscar
        </button>
      </div>
    </form>

    <div id="results-container">
    {/* Display results (only for single results now) */}
    {invitadoData && (
      <div class="mt-4">
        <h2 class="text-lg font-semibold mb-2">Información del Invitado:</h2>
        <p class="mb-1"><strong>Nombre:</strong> {invitadoData.nombre}</p>
        <p class="mb-4">
            <strong class="text-lg">Mesa Asignada:</strong>
            <span class="text-3xl font-extrabold text-indigo-600">{invitadoData.mesa ?? '-'}</span>
        </p>
        <p class="mb-1"><strong>Pases Otorgados:</strong> {invitadoData.pases ?? '-'}</p>
          {invitadoData.confirmacion &&(
            <>
                <p class="mb-1"><strong>Pases Confirmados:</strong> {invitadoData.confirmacion?.asistentesConfirmados ?? 0}</p>
                <p class="mb-1">
                  <strong>Asistencia:</strong>{" "}
                  {invitadoData.confirmacion.asistencia ? "Sí" : "No"} {/* Corrected ternary operator */}
                </p>
            </>
          )}

      </div>
    )}

    {errorMessage && (
      <div class="mt-4 text-red-600">
        {errorMessage}
      </div>
    )}
    </div>
  </div>

<script client:load>
    let html5QrcodeScanner; // Declare outside the functions

    function onScanSuccess(decodedText, decodedResult) {
        // Handle on success condition with the decoded text or result.
        console.log(`Scan result: ${decodedText}`, decodedResult);
        document.getElementById('qr-result').value = decodedText;
        document.getElementById('qr-form').submit();
        html5QrcodeScanner.clear(); // Stop scanning after a successful scan.
    }

    function onScanError(errorMessage) {
        // handle on error condition, with error message
        //console.warn(`QR error = ${errorMessage}`); // Uncomment for debugging
    }

    // Initialize the scanner *only once* when the script loads:
    function initializeScanner() {
        if(!html5QrcodeScanner) { // Check if it's already initialized
            html5QrcodeScanner = new Html5QrcodeScanner(
            "reader", { fps: 10, qrbox: {width: 250, height: 250}, aspectRatio: 1.0 });
            html5QrcodeScanner.render(onScanSuccess, onScanError);
        }
    }
    initializeScanner(); // Call the initialization function


    const qrForm = document.getElementById('qr-form');
    const idForm = document.getElementById('id-form'); // Get the ID form


    async function handleSubmit(event) {
        event.preventDefault();
        console.log("handleSubmit called");

        const form = event.currentTarget;
        const data = new FormData(form);

        console.log("Form data:", data);
        for (let pair of data.entries()) {
            console.log(pair[0] + ': ' + pair[1]);
        }

        try {
          const response = await fetch(form.action, {
            method: form.method,
            body: data,
          });

            if (response.ok) {
              // Parse the response as text
              const html = await response.text();

              // Extract the relevant parts from the HTML response
              const parser = new DOMParser();
              const doc = parser.parseFromString(html, 'text/html');

              // Update the relevant parts of the current page
              const newDataElement = doc.querySelector('#results-container');
              if (newDataElement) {
                document.querySelector('#results-container').innerHTML = newDataElement.innerHTML;
              }

            } else {
                console.error("Server error:", response.status);
                alert("Hubo un error al procesar tu solicitud.");
            }
        } catch (error) {
            console.error("Network error:", error);
            alert("Hubo un error de red. Verifica tu conexión.");
        }
    }

    if (qrForm) {
        qrForm.addEventListener('submit', handleSubmit);
    }
    if (idForm) { // Add event listener to the ID form
        idForm.addEventListener('submit', handleSubmit);
    }

</script>

</body>
</html>